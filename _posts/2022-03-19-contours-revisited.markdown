---
layout: post
title:  "Contours Revisited"
date:   2022-03-19 13:13:00 -0700
categories: 
---
I want to generate a navigation mesh that follows contours, but the contour image we've been producing to date is pretty limited.

![Naive Contours]({{ "/assets/images/ContoursRevisited1.png" }})

This image is generated by scaling the noise map, then applying a conditional color: black for pixels that have a scaled value within range of an integer, and white otherwise.

Some general limitations:
* The contours have varying width due to applying a tolerance range, so it's not clear exactly where the real contour line is.
* There is no knowledge of the direction of a contour at any point, or what other points are connected to that contour.
* There is also nothing in the contour image that differentiates one contour from another.  All contours are the same color, regardless of height.  Pixels are either black or whiteâ€“close to an integer or not.

The goal here is to be able to create vertices along contour lines, so we need to overcome at least the first of these limitations.

Researching contouring algorithms, I came across the CONREC algorithm from **Paul Bourke**.

* [CONREC](http://paulbourke.net/papers/conrec/)

The algorithm sweeps the heightmap using a 2x2 window and detects a number of scenarios.  Each window operation results in a callback with two (X, Y) coordinate pairs and a Z height value.  This callback is traditionally used to draw a line, and the composition of these lines produces a nice contour.

Instead of drawing lines, i repurposed the callback to average the (X, Y) coordinates and write a single vertex into a list.  This produced a pretty high resolution sampling of the actual contour lines.

![Smarter Contours]({{ "/assets/images/ContoursRevisited2.png" }})

This fixes the key limitation, which is that we now have points that are centered exactly on the contour, rather than spread out to either side.

However, the resolution of the data is too high.  The algorithm generated a LOT of points, way too many for the pathfinding graph.  I hacked up an post-processing algorithm to thin them out.

The thinning algorithm first sorts the vertices in X, left to right.  It then walks through them and uses proximity to detect contour association for each vertex.  Any vertex within a certain radius of the previous point is discarded.  This results in a number of collections of vertices, each associated with a specific contour. There are certainly limitations with this approach, but it works for now.

Visualizing the full set of thinned vertices results in a nicely distributed set of points along contours.  In the image below, I generated twice as many contours as in the texture, resulting in contours between contours.

![Smarter Contours]({{ "/assets/images/ContoursRevisited3.png" }})

Looking pretty good.